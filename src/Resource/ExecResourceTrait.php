<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Docker\API\Resource;

trait ExecResourceTrait
{
    /**
     * Run a command inside a running container.
     *
     * @param string                                     $id         ID or name of container
     * @param \Docker\API\Model\ContainersIdExecPostBody $execConfig Exec configuration
     * @param string                                     $fetch      Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ContainerExecNotFoundException
     * @throws \Docker\API\Exception\ContainerExecConflictException
     * @throws \Docker\API\Exception\ContainerExecInternalServerErrorException
     *
     * @return null|\Docker\API\Model\IdResponse|\Psr\Http\Message\ResponseInterface
     */
    public function containerExec(string $id, \Docker\API\Model\ContainersIdExecPostBody $execConfig, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ContainerExec($id, $execConfig);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
     *
     * @param string                                $id              Exec instance ID
     * @param \Docker\API\Model\ExecIdStartPostBody $execStartConfig
     * @param string                                $fetch           Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ExecStartNotFoundException
     * @throws \Docker\API\Exception\ExecStartConflictException
     *
     * @return null|\Psr\Http\Message\ResponseInterface
     */
    public function execStart(string $id, \Docker\API\Model\ExecIdStartPostBody $execStartConfig, array $parameters, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ExecStart($id, $execStartConfig);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance.
     *
     * @param string $id              Exec instance ID
     * @param array  $queryParameters {
     *
     *     @var int $h Height of the TTY session in characters
     *     @var int $w Width of the TTY session in characters
     * }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ExecResizeNotFoundException
     *
     * @return null|\Psr\Http\Message\ResponseInterface
     */
    public function execResize(string $id, array $queryParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ExecResize($id, $queryParameters);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }

    /**
     * Return low-level information about an exec instance.
     *
     * @param string $id    Exec instance ID
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @throws \Docker\API\Exception\ExecInspectNotFoundException
     * @throws \Docker\API\Exception\ExecInspectInternalServerErrorException
     *
     * @return null|\Docker\API\Model\ExecIdJsonGetResponse200|\Psr\Http\Message\ResponseInterface
     */
    public function execInspect(string $id, string $fetch = self::FETCH_OBJECT)
    {
        $endpoint = new \Docker\API\Endpoint\ExecInspect($id);

        return $this->executePsr7Endpoint($endpoint, $fetch);
    }
}
